name: Github Pages Azure DNS resources

on:
  workflow_dispatch:
  push:
    paths:
      - "azure/**"
      - ".github/workflows/azure.yml"

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: List cloud-docs.info azure resources
        run: az network dns record-set list --resource-group dns-rg --zone-name "cloud-docs.info"

      - name: List GitHub Repositories
        id: list_repos
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const response = await github.rest.repos.listForAuthenticatedUser();
            const repoNames = response.data.map(repo => repo.name);
            console.log(repoNames);
            core.setOutput('repositories', JSON.stringify(repoNames))

      - name: Deploy Azure DNS resources
        id: deploy_dns
        run: |
          githubRepositories='${{ steps.list_repos.outputs.repositories }}'
          command="az deployment group create --resource-group dns-rg --template-file azure-dns.bicep --parameters dnsZoneName='cloud-docs.info' --parameters repositoryNames=\$githubRepositories"
          echo $command
          eval $command
          echo "::set-output name=domain_name::${{ github.event.repository.name }}.cloud-docs.info"

      - name: Create /docs directory and README.md for each repository
        run: |
          $repos = '${{ steps.list_repos.outputs.repositories }}' | ConvertFrom-Json
          foreach ($repo in $repos) {
            $url = "https://api.github.com/repos/${{ github.actor }}/$repo/contents/docs/README.md"
            $body = @{
              message = "Create /docs and README.md for GitHub Pages"
              content = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("# Welcome to GitHub Pages\nThis is a default README.md in the /docs directory"))
              branch = "main"
            }
            $bodyJson = $body | ConvertTo-Json -Compress
            $headers = @{
              "Authorization" = "Bearer ${{ secrets.GH_TOKEN }}"
              "Accept" = "application/vnd.github.v3+json"
            }
            try {
              Invoke-RestMethod -Uri $url -Method Put -Body $bodyJson -Headers $headers
              Write-Host "Successfully created /docs and README.md for ${repo}."
            } catch {
              Write-Host "Failed to create /docs and README.md for ${repo}: $_"
            }
          }
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Enable GitHub Pages and set custom domain for each repository
        run: |
          $repos = '${{ steps.list_repos.outputs.repositories }}' | ConvertFrom-Json
          foreach ($repo in $repos) {
            $url = "https://api.github.com/repos/${{ github.actor }}/$repo/pages"
            $headers = @{
              "Authorization" = "Bearer ${{ secrets.GH_TOKEN }}"
              "Accept" = "application/vnd.github+json"
              "Content-Type" = "application/json"
            }
            $body = @{
              source = @{ branch = "main"; path = "/docs" }
              cname = "$repo.cloud-docs.info"
              https_enforced= $true
            }
            $bodyJson = $body | ConvertTo-Json -Compress
            try {
              $currentPageConfig = Invoke-RestMethod -Uri $url -Method Get -Headers $headers
              if ($null -ne $currentPageConfig.cname -and $currentPageConfig.cname -eq $body.cname) {
                Write-Host "GitHub Pages configuration for $repo is already up to date."
              } else {
                Write-Host "Updating GitHub Pages configuration for ${repo}..."
                Invoke-RestMethod -Uri $url -Method Put -Body $bodyJson -Headers $headers
                Write-Host "Successfully updated GitHub Pages configuration for ${repo}."
              }
            } catch {
              Write-Host "Attempt to enable or update GitHub Pages failed for ${repo}: $_"
              try {
                Write-Host "Attempting to enable GitHub Pages for ${repo}..."
                Invoke-RestMethod -Uri $url -Method Post -Body $bodyJson -Headers $headers
                Write-Host "Successfully enabled GitHub Pages for ${repo}."
              } catch {
                Write-Host "Failed to enable GitHub Pages for ${repo}: $_"
              }
            }
          }
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Deployed cloud-docs.info azure resources
        run: az network dns record-set list --resource-group dns-rg --zone-name "cloud-docs.info"
